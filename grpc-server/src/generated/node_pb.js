// source: node.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.quikdb.node.GetNodeInfoRequest', null, global);
goog.exportSymbol('proto.quikdb.node.GetNodeInfoResponse', null, global);
goog.exportSymbol('proto.quikdb.node.GetNodeStatsRequest', null, global);
goog.exportSymbol('proto.quikdb.node.GetNodeStatsResponse', null, global);
goog.exportSymbol('proto.quikdb.node.GetNodesRequest', null, global);
goog.exportSymbol('proto.quikdb.node.GetNodesResponse', null, global);
goog.exportSymbol('proto.quikdb.node.ListNodeRequest', null, global);
goog.exportSymbol('proto.quikdb.node.ListNodeResponse', null, global);
goog.exportSymbol('proto.quikdb.node.NodeCapacity', null, global);
goog.exportSymbol('proto.quikdb.node.NodeExtendedInfo', null, global);
goog.exportSymbol('proto.quikdb.node.NodeInfo', null, global);
goog.exportSymbol('proto.quikdb.node.NodeListing', null, global);
goog.exportSymbol('proto.quikdb.node.NodeMetrics', null, global);
goog.exportSymbol('proto.quikdb.node.NodeStats', null, global);
goog.exportSymbol('proto.quikdb.node.NodeStatus', null, global);
goog.exportSymbol('proto.quikdb.node.NodeTier', null, global);
goog.exportSymbol('proto.quikdb.node.ProviderType', null, global);
goog.exportSymbol('proto.quikdb.node.RegisterNodeRequest', null, global);
goog.exportSymbol('proto.quikdb.node.RegisterNodeResponse', null, global);
goog.exportSymbol('proto.quikdb.node.StreamNodesRequest', null, global);
goog.exportSymbol('proto.quikdb.node.StreamNodesResponse', null, global);
goog.exportSymbol('proto.quikdb.node.UpdateNodeExtendedInfoRequest', null, global);
goog.exportSymbol('proto.quikdb.node.UpdateNodeExtendedInfoResponse', null, global);
goog.exportSymbol('proto.quikdb.node.UpdateNodeStatusRequest', null, global);
goog.exportSymbol('proto.quikdb.node.UpdateNodeStatusResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeCapacity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.NodeCapacity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeCapacity.displayName = 'proto.quikdb.node.NodeCapacity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.NodeMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeMetrics.displayName = 'proto.quikdb.node.NodeMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeListing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quikdb.node.NodeListing.repeatedFields_, null);
};
goog.inherits(proto.quikdb.node.NodeListing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeListing.displayName = 'proto.quikdb.node.NodeListing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeExtendedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quikdb.node.NodeExtendedInfo.repeatedFields_, null);
};
goog.inherits(proto.quikdb.node.NodeExtendedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeExtendedInfo.displayName = 'proto.quikdb.node.NodeExtendedInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quikdb.node.NodeInfo.repeatedFields_, null);
};
goog.inherits(proto.quikdb.node.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeInfo.displayName = 'proto.quikdb.node.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.NodeStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.NodeStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.NodeStats.displayName = 'proto.quikdb.node.NodeStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.RegisterNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.RegisterNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.RegisterNodeRequest.displayName = 'proto.quikdb.node.RegisterNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.RegisterNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.RegisterNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.RegisterNodeResponse.displayName = 'proto.quikdb.node.RegisterNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.GetNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodeInfoRequest.displayName = 'proto.quikdb.node.GetNodeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.GetNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodeInfoResponse.displayName = 'proto.quikdb.node.GetNodeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.UpdateNodeStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.UpdateNodeStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.UpdateNodeStatusRequest.displayName = 'proto.quikdb.node.UpdateNodeStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.UpdateNodeStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.UpdateNodeStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.UpdateNodeStatusResponse.displayName = 'proto.quikdb.node.UpdateNodeStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.UpdateNodeExtendedInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.UpdateNodeExtendedInfoRequest.displayName = 'proto.quikdb.node.UpdateNodeExtendedInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.UpdateNodeExtendedInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.UpdateNodeExtendedInfoResponse.displayName = 'proto.quikdb.node.UpdateNodeExtendedInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.ListNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.ListNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.ListNodeRequest.displayName = 'proto.quikdb.node.ListNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.ListNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.ListNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.ListNodeResponse.displayName = 'proto.quikdb.node.ListNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodeStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.GetNodeStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodeStatsRequest.displayName = 'proto.quikdb.node.GetNodeStatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodeStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.GetNodeStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodeStatsResponse.displayName = 'proto.quikdb.node.GetNodeStatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.GetNodesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodesRequest.displayName = 'proto.quikdb.node.GetNodesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.GetNodesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quikdb.node.GetNodesResponse.repeatedFields_, null);
};
goog.inherits(proto.quikdb.node.GetNodesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.GetNodesResponse.displayName = 'proto.quikdb.node.GetNodesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.StreamNodesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quikdb.node.StreamNodesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.StreamNodesRequest.displayName = 'proto.quikdb.node.StreamNodesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quikdb.node.StreamNodesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quikdb.node.StreamNodesResponse.repeatedFields_, null);
};
goog.inherits(proto.quikdb.node.StreamNodesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quikdb.node.StreamNodesResponse.displayName = 'proto.quikdb.node.StreamNodesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeCapacity.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeCapacity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeCapacity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeCapacity.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpuCores: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memoryGb: jspb.Message.getFieldWithDefault(msg, 2, 0),
    storageGb: jspb.Message.getFieldWithDefault(msg, 3, 0),
    networkMbps: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gpuCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gpuType: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeCapacity}
 */
proto.quikdb.node.NodeCapacity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeCapacity;
  return proto.quikdb.node.NodeCapacity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeCapacity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeCapacity}
 */
proto.quikdb.node.NodeCapacity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCpuCores(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryGb(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorageGb(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetworkMbps(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGpuCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpuType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeCapacity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeCapacity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeCapacity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeCapacity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpuCores();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMemoryGb();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStorageGb();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNetworkMbps();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGpuCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getGpuType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 cpu_cores = 1;
 * @return {number}
 */
proto.quikdb.node.NodeCapacity.prototype.getCpuCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setCpuCores = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 memory_gb = 2;
 * @return {number}
 */
proto.quikdb.node.NodeCapacity.prototype.getMemoryGb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setMemoryGb = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 storage_gb = 3;
 * @return {number}
 */
proto.quikdb.node.NodeCapacity.prototype.getStorageGb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setStorageGb = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 network_mbps = 4;
 * @return {number}
 */
proto.quikdb.node.NodeCapacity.prototype.getNetworkMbps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setNetworkMbps = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 gpu_count = 5;
 * @return {number}
 */
proto.quikdb.node.NodeCapacity.prototype.getGpuCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setGpuCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string gpu_type = 6;
 * @return {string}
 */
proto.quikdb.node.NodeCapacity.prototype.getGpuType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeCapacity} returns this
 */
proto.quikdb.node.NodeCapacity.prototype.setGpuType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptimePercentage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalJobs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    successfulJobs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalEarnings: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastHeartbeat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    avgResponseTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeMetrics}
 */
proto.quikdb.node.NodeMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeMetrics;
  return proto.quikdb.node.NodeMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeMetrics}
 */
proto.quikdb.node.NodeMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimePercentage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalJobs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSuccessfulJobs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalEarnings(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastHeartbeat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvgResponseTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUptimePercentage();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalJobs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSuccessfulJobs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTotalEarnings();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastHeartbeat();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getAvgResponseTime();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 uptime_percentage = 1;
 * @return {number}
 */
proto.quikdb.node.NodeMetrics.prototype.getUptimePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setUptimePercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_jobs = 2;
 * @return {number}
 */
proto.quikdb.node.NodeMetrics.prototype.getTotalJobs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setTotalJobs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 successful_jobs = 3;
 * @return {number}
 */
proto.quikdb.node.NodeMetrics.prototype.getSuccessfulJobs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setSuccessfulJobs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string total_earnings = 4;
 * @return {string}
 */
proto.quikdb.node.NodeMetrics.prototype.getTotalEarnings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setTotalEarnings = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 last_heartbeat = 5;
 * @return {number}
 */
proto.quikdb.node.NodeMetrics.prototype.getLastHeartbeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setLastHeartbeat = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 avg_response_time = 6;
 * @return {number}
 */
proto.quikdb.node.NodeMetrics.prototype.getAvgResponseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeMetrics} returns this
 */
proto.quikdb.node.NodeMetrics.prototype.setAvgResponseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quikdb.node.NodeListing.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeListing.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeListing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeListing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeListing.toObject = function(includeInstance, msg) {
  var f, obj = {
    isListed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    hourlyRate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    availability: jspb.Message.getFieldWithDefault(msg, 3, 0),
    region: jspb.Message.getFieldWithDefault(msg, 4, ""),
    supportedServicesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    minJobDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxJobDuration: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeListing}
 */
proto.quikdb.node.NodeListing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeListing;
  return proto.quikdb.node.NodeListing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeListing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeListing}
 */
proto.quikdb.node.NodeListing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsListed(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailability(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportedServices(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinJobDuration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxJobDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeListing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeListing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeListing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeListing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsListed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHourlyRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSupportedServicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getMinJobDuration();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxJobDuration();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional bool is_listed = 1;
 * @return {boolean}
 */
proto.quikdb.node.NodeListing.prototype.getIsListed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setIsListed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string hourly_rate = 2;
 * @return {string}
 */
proto.quikdb.node.NodeListing.prototype.getHourlyRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setHourlyRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 availability = 3;
 * @return {number}
 */
proto.quikdb.node.NodeListing.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string region = 4;
 * @return {string}
 */
proto.quikdb.node.NodeListing.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string supported_services = 5;
 * @return {!Array<string>}
 */
proto.quikdb.node.NodeListing.prototype.getSupportedServicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setSupportedServicesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.addSupportedServices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.clearSupportedServicesList = function() {
  return this.setSupportedServicesList([]);
};


/**
 * optional uint64 min_job_duration = 6;
 * @return {number}
 */
proto.quikdb.node.NodeListing.prototype.getMinJobDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setMinJobDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 max_job_duration = 7;
 * @return {number}
 */
proto.quikdb.node.NodeListing.prototype.getMaxJobDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeListing} returns this
 */
proto.quikdb.node.NodeListing.prototype.setMaxJobDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quikdb.node.NodeExtendedInfo.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeExtendedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeExtendedInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeExtendedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hardwareFingerprint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    carbonFootprint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    complianceList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    securityScore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    operatorBio: jspb.Message.getFieldWithDefault(msg, 5, ""),
    specialCapabilitiesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    bondAmount: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isVerified: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    verificationExpiry: jspb.Message.getFieldWithDefault(msg, 9, 0),
    contactInfo: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeExtendedInfo}
 */
proto.quikdb.node.NodeExtendedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeExtendedInfo;
  return proto.quikdb.node.NodeExtendedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeExtendedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeExtendedInfo}
 */
proto.quikdb.node.NodeExtendedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardwareFingerprint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCarbonFootprint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCompliance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSecurityScore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorBio(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addSpecialCapabilities(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBondAmount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVerified(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVerificationExpiry(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeExtendedInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeExtendedInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeExtendedInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHardwareFingerprint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCarbonFootprint();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getComplianceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSecurityScore();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOperatorBio();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSpecialCapabilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getBondAmount();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsVerified();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getVerificationExpiry();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getContactInfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string hardware_fingerprint = 1;
 * @return {string}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getHardwareFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setHardwareFingerprint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 carbon_footprint = 2;
 * @return {number}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getCarbonFootprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setCarbonFootprint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string compliance = 3;
 * @return {!Array<string>}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getComplianceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setComplianceList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.addCompliance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.clearComplianceList = function() {
  return this.setComplianceList([]);
};


/**
 * optional uint64 security_score = 4;
 * @return {number}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getSecurityScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setSecurityScore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string operator_bio = 5;
 * @return {string}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getOperatorBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setOperatorBio = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string special_capabilities = 6;
 * @return {!Array<string>}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getSpecialCapabilitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setSpecialCapabilitiesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.addSpecialCapabilities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.clearSpecialCapabilitiesList = function() {
  return this.setSpecialCapabilitiesList([]);
};


/**
 * optional string bond_amount = 7;
 * @return {string}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getBondAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setBondAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_verified = 8;
 * @return {boolean}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getIsVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setIsVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 verification_expiry = 9;
 * @return {number}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getVerificationExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setVerificationExpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string contact_info = 10;
 * @return {string}
 */
proto.quikdb.node.NodeExtendedInfo.prototype.getContactInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeExtendedInfo} returns this
 */
proto.quikdb.node.NodeExtendedInfo.prototype.setContactInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quikdb.node.NodeInfo.repeatedFields_ = [13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    providerType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tier: jspb.Message.getFieldWithDefault(msg, 5, 0),
    capacity: (f = msg.getCapacity()) && proto.quikdb.node.NodeCapacity.toObject(includeInstance, f),
    metrics: (f = msg.getMetrics()) && proto.quikdb.node.NodeMetrics.toObject(includeInstance, f),
    listing: (f = msg.getListing()) && proto.quikdb.node.NodeListing.toObject(includeInstance, f),
    registeredAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lastUpdated: jspb.Message.getFieldWithDefault(msg, 10, 0),
    exists: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    extended: (f = msg.getExtended()) && proto.quikdb.node.NodeExtendedInfo.toObject(includeInstance, f),
    certificationsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    connectedNetworksList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeInfo}
 */
proto.quikdb.node.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeInfo;
  return proto.quikdb.node.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeInfo}
 */
proto.quikdb.node.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.quikdb.node.NodeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {!proto.quikdb.node.ProviderType} */ (reader.readEnum());
      msg.setProviderType(value);
      break;
    case 5:
      var value = /** @type {!proto.quikdb.node.NodeTier} */ (reader.readEnum());
      msg.setTier(value);
      break;
    case 6:
      var value = new proto.quikdb.node.NodeCapacity;
      reader.readMessage(value,proto.quikdb.node.NodeCapacity.deserializeBinaryFromReader);
      msg.setCapacity(value);
      break;
    case 7:
      var value = new proto.quikdb.node.NodeMetrics;
      reader.readMessage(value,proto.quikdb.node.NodeMetrics.deserializeBinaryFromReader);
      msg.setMetrics(value);
      break;
    case 8:
      var value = new proto.quikdb.node.NodeListing;
      reader.readMessage(value,proto.quikdb.node.NodeListing.deserializeBinaryFromReader);
      msg.setListing(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRegisteredAt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastUpdated(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExists(value);
      break;
    case 12:
      var value = new proto.quikdb.node.NodeExtendedInfo;
      reader.readMessage(value,proto.quikdb.node.NodeExtendedInfo.deserializeBinaryFromReader);
      msg.setExtended(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addCertifications(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addConnectedNetworks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getProviderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTier();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCapacity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.quikdb.node.NodeCapacity.serializeBinaryToWriter
    );
  }
  f = message.getMetrics();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.quikdb.node.NodeMetrics.serializeBinaryToWriter
    );
  }
  f = message.getListing();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.quikdb.node.NodeListing.serializeBinaryToWriter
    );
  }
  f = message.getRegisteredAt();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getLastUpdated();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getExists();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getExtended();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.quikdb.node.NodeExtendedInfo.serializeBinaryToWriter
    );
  }
  f = message.getCertificationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getConnectedNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.NodeInfo.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_address = 2;
 * @return {string}
 */
proto.quikdb.node.NodeInfo.prototype.getNodeAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setNodeAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeStatus status = 3;
 * @return {!proto.quikdb.node.NodeStatus}
 */
proto.quikdb.node.NodeInfo.prototype.getStatus = function() {
  return /** @type {!proto.quikdb.node.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.quikdb.node.NodeStatus} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ProviderType provider_type = 4;
 * @return {!proto.quikdb.node.ProviderType}
 */
proto.quikdb.node.NodeInfo.prototype.getProviderType = function() {
  return /** @type {!proto.quikdb.node.ProviderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.quikdb.node.ProviderType} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setProviderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional NodeTier tier = 5;
 * @return {!proto.quikdb.node.NodeTier}
 */
proto.quikdb.node.NodeInfo.prototype.getTier = function() {
  return /** @type {!proto.quikdb.node.NodeTier} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.quikdb.node.NodeTier} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setTier = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional NodeCapacity capacity = 6;
 * @return {?proto.quikdb.node.NodeCapacity}
 */
proto.quikdb.node.NodeInfo.prototype.getCapacity = function() {
  return /** @type{?proto.quikdb.node.NodeCapacity} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeCapacity, 6));
};


/**
 * @param {?proto.quikdb.node.NodeCapacity|undefined} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
*/
proto.quikdb.node.NodeInfo.prototype.setCapacity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearCapacity = function() {
  return this.setCapacity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.NodeInfo.prototype.hasCapacity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NodeMetrics metrics = 7;
 * @return {?proto.quikdb.node.NodeMetrics}
 */
proto.quikdb.node.NodeInfo.prototype.getMetrics = function() {
  return /** @type{?proto.quikdb.node.NodeMetrics} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeMetrics, 7));
};


/**
 * @param {?proto.quikdb.node.NodeMetrics|undefined} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
*/
proto.quikdb.node.NodeInfo.prototype.setMetrics = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearMetrics = function() {
  return this.setMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.NodeInfo.prototype.hasMetrics = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NodeListing listing = 8;
 * @return {?proto.quikdb.node.NodeListing}
 */
proto.quikdb.node.NodeInfo.prototype.getListing = function() {
  return /** @type{?proto.quikdb.node.NodeListing} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeListing, 8));
};


/**
 * @param {?proto.quikdb.node.NodeListing|undefined} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
*/
proto.quikdb.node.NodeInfo.prototype.setListing = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearListing = function() {
  return this.setListing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.NodeInfo.prototype.hasListing = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 registered_at = 9;
 * @return {number}
 */
proto.quikdb.node.NodeInfo.prototype.getRegisteredAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setRegisteredAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 last_updated = 10;
 * @return {number}
 */
proto.quikdb.node.NodeInfo.prototype.getLastUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setLastUpdated = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool exists = 11;
 * @return {boolean}
 */
proto.quikdb.node.NodeInfo.prototype.getExists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setExists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional NodeExtendedInfo extended = 12;
 * @return {?proto.quikdb.node.NodeExtendedInfo}
 */
proto.quikdb.node.NodeInfo.prototype.getExtended = function() {
  return /** @type{?proto.quikdb.node.NodeExtendedInfo} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeExtendedInfo, 12));
};


/**
 * @param {?proto.quikdb.node.NodeExtendedInfo|undefined} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
*/
proto.quikdb.node.NodeInfo.prototype.setExtended = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearExtended = function() {
  return this.setExtended(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.NodeInfo.prototype.hasExtended = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated string certifications = 13;
 * @return {!Array<string>}
 */
proto.quikdb.node.NodeInfo.prototype.getCertificationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setCertificationsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.addCertifications = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearCertificationsList = function() {
  return this.setCertificationsList([]);
};


/**
 * repeated string connected_networks = 14;
 * @return {!Array<string>}
 */
proto.quikdb.node.NodeInfo.prototype.getConnectedNetworksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.setConnectedNetworksList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.addConnectedNetworks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.NodeInfo} returns this
 */
proto.quikdb.node.NodeInfo.prototype.clearConnectedNetworksList = function() {
  return this.setConnectedNetworksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.NodeStats.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.NodeStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.NodeStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    activeNodes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    listedNodes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    verifiedNodes: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.NodeStats}
 */
proto.quikdb.node.NodeStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.NodeStats;
  return proto.quikdb.node.NodeStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.NodeStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.NodeStats}
 */
proto.quikdb.node.NodeStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalNodes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveNodes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setListedNodes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVerifiedNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.NodeStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.NodeStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.NodeStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.NodeStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalNodes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getActiveNodes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getListedNodes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getVerifiedNodes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 total_nodes = 1;
 * @return {number}
 */
proto.quikdb.node.NodeStats.prototype.getTotalNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeStats} returns this
 */
proto.quikdb.node.NodeStats.prototype.setTotalNodes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 active_nodes = 2;
 * @return {number}
 */
proto.quikdb.node.NodeStats.prototype.getActiveNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeStats} returns this
 */
proto.quikdb.node.NodeStats.prototype.setActiveNodes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 listed_nodes = 3;
 * @return {number}
 */
proto.quikdb.node.NodeStats.prototype.getListedNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeStats} returns this
 */
proto.quikdb.node.NodeStats.prototype.setListedNodes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 verified_nodes = 4;
 * @return {number}
 */
proto.quikdb.node.NodeStats.prototype.getVerifiedNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.NodeStats} returns this
 */
proto.quikdb.node.NodeStats.prototype.setVerifiedNodes = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.RegisterNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.RegisterNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.RegisterNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    providerType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.RegisterNodeRequest}
 */
proto.quikdb.node.RegisterNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.RegisterNodeRequest;
  return proto.quikdb.node.RegisterNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.RegisterNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.RegisterNodeRequest}
 */
proto.quikdb.node.RegisterNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.quikdb.node.NodeTier} */ (reader.readEnum());
      msg.setTier(value);
      break;
    case 4:
      var value = /** @type {!proto.quikdb.node.ProviderType} */ (reader.readEnum());
      msg.setProviderType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.RegisterNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.RegisterNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.RegisterNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTier();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getProviderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.RegisterNodeRequest} returns this
 */
proto.quikdb.node.RegisterNodeRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_address = 2;
 * @return {string}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.getNodeAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.RegisterNodeRequest} returns this
 */
proto.quikdb.node.RegisterNodeRequest.prototype.setNodeAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeTier tier = 3;
 * @return {!proto.quikdb.node.NodeTier}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.getTier = function() {
  return /** @type {!proto.quikdb.node.NodeTier} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.quikdb.node.NodeTier} value
 * @return {!proto.quikdb.node.RegisterNodeRequest} returns this
 */
proto.quikdb.node.RegisterNodeRequest.prototype.setTier = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ProviderType provider_type = 4;
 * @return {!proto.quikdb.node.ProviderType}
 */
proto.quikdb.node.RegisterNodeRequest.prototype.getProviderType = function() {
  return /** @type {!proto.quikdb.node.ProviderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.quikdb.node.ProviderType} value
 * @return {!proto.quikdb.node.RegisterNodeRequest} returns this
 */
proto.quikdb.node.RegisterNodeRequest.prototype.setProviderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.RegisterNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.RegisterNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.RegisterNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.RegisterNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.RegisterNodeResponse}
 */
proto.quikdb.node.RegisterNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.RegisterNodeResponse;
  return proto.quikdb.node.RegisterNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.RegisterNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.RegisterNodeResponse}
 */
proto.quikdb.node.RegisterNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.RegisterNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.RegisterNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.RegisterNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.RegisterNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.quikdb.node.RegisterNodeResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.RegisterNodeResponse} returns this
 */
proto.quikdb.node.RegisterNodeResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.quikdb.node.RegisterNodeResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.RegisterNodeResponse} returns this
 */
proto.quikdb.node.RegisterNodeResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.quikdb.node.RegisterNodeResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.RegisterNodeResponse} returns this
 */
proto.quikdb.node.RegisterNodeResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodeInfoRequest}
 */
proto.quikdb.node.GetNodeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodeInfoRequest;
  return proto.quikdb.node.GetNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodeInfoRequest}
 */
proto.quikdb.node.GetNodeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.GetNodeInfoRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.GetNodeInfoRequest} returns this
 */
proto.quikdb.node.GetNodeInfoRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.quikdb.node.NodeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodeInfoResponse}
 */
proto.quikdb.node.GetNodeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodeInfoResponse;
  return proto.quikdb.node.GetNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodeInfoResponse}
 */
proto.quikdb.node.GetNodeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quikdb.node.NodeInfo;
      reader.readMessage(value,proto.quikdb.node.NodeInfo.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quikdb.node.NodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeInfo node = 1;
 * @return {?proto.quikdb.node.NodeInfo}
 */
proto.quikdb.node.GetNodeInfoResponse.prototype.getNode = function() {
  return /** @type{?proto.quikdb.node.NodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeInfo, 1));
};


/**
 * @param {?proto.quikdb.node.NodeInfo|undefined} value
 * @return {!proto.quikdb.node.GetNodeInfoResponse} returns this
*/
proto.quikdb.node.GetNodeInfoResponse.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.GetNodeInfoResponse} returns this
 */
proto.quikdb.node.GetNodeInfoResponse.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.GetNodeInfoResponse.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.UpdateNodeStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.UpdateNodeStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.UpdateNodeStatusRequest}
 */
proto.quikdb.node.UpdateNodeStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.UpdateNodeStatusRequest;
  return proto.quikdb.node.UpdateNodeStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.UpdateNodeStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.UpdateNodeStatusRequest}
 */
proto.quikdb.node.UpdateNodeStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {!proto.quikdb.node.NodeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.UpdateNodeStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.UpdateNodeStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeStatusRequest} returns this
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeStatus status = 2;
 * @return {!proto.quikdb.node.NodeStatus}
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.getStatus = function() {
  return /** @type {!proto.quikdb.node.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.quikdb.node.NodeStatus} value
 * @return {!proto.quikdb.node.UpdateNodeStatusRequest} returns this
 */
proto.quikdb.node.UpdateNodeStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.UpdateNodeStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.UpdateNodeStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.UpdateNodeStatusResponse}
 */
proto.quikdb.node.UpdateNodeStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.UpdateNodeStatusResponse;
  return proto.quikdb.node.UpdateNodeStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.UpdateNodeStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.UpdateNodeStatusResponse}
 */
proto.quikdb.node.UpdateNodeStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.UpdateNodeStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.UpdateNodeStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.UpdateNodeStatusResponse} returns this
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeStatusResponse} returns this
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeStatusResponse} returns this
 */
proto.quikdb.node.UpdateNodeStatusResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.UpdateNodeExtendedInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    extended: (f = msg.getExtended()) && proto.quikdb.node.NodeExtendedInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoRequest}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.UpdateNodeExtendedInfoRequest;
  return proto.quikdb.node.UpdateNodeExtendedInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoRequest}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = new proto.quikdb.node.NodeExtendedInfo;
      reader.readMessage(value,proto.quikdb.node.NodeExtendedInfo.deserializeBinaryFromReader);
      msg.setExtended(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.UpdateNodeExtendedInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtended();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quikdb.node.NodeExtendedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} returns this
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeExtendedInfo extended = 2;
 * @return {?proto.quikdb.node.NodeExtendedInfo}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.getExtended = function() {
  return /** @type{?proto.quikdb.node.NodeExtendedInfo} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeExtendedInfo, 2));
};


/**
 * @param {?proto.quikdb.node.NodeExtendedInfo|undefined} value
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} returns this
*/
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.setExtended = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoRequest} returns this
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.clearExtended = function() {
  return this.setExtended(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.UpdateNodeExtendedInfoRequest.prototype.hasExtended = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.UpdateNodeExtendedInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoResponse}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.UpdateNodeExtendedInfoResponse;
  return proto.quikdb.node.UpdateNodeExtendedInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoResponse}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.UpdateNodeExtendedInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} returns this
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} returns this
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.UpdateNodeExtendedInfoResponse} returns this
 */
proto.quikdb.node.UpdateNodeExtendedInfoResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.ListNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.ListNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.ListNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.ListNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hourlyRate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    availability: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.ListNodeRequest}
 */
proto.quikdb.node.ListNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.ListNodeRequest;
  return proto.quikdb.node.ListNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.ListNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.ListNodeRequest}
 */
proto.quikdb.node.ListNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.ListNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.ListNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.ListNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.ListNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHourlyRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.quikdb.node.ListNodeRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.ListNodeRequest} returns this
 */
proto.quikdb.node.ListNodeRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hourly_rate = 2;
 * @return {string}
 */
proto.quikdb.node.ListNodeRequest.prototype.getHourlyRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.ListNodeRequest} returns this
 */
proto.quikdb.node.ListNodeRequest.prototype.setHourlyRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 availability = 3;
 * @return {number}
 */
proto.quikdb.node.ListNodeRequest.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.ListNodeRequest} returns this
 */
proto.quikdb.node.ListNodeRequest.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.ListNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.ListNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.ListNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.ListNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    transactionHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.ListNodeResponse}
 */
proto.quikdb.node.ListNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.ListNodeResponse;
  return proto.quikdb.node.ListNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.ListNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.ListNodeResponse}
 */
proto.quikdb.node.ListNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.ListNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.ListNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.ListNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.ListNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.quikdb.node.ListNodeResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.ListNodeResponse} returns this
 */
proto.quikdb.node.ListNodeResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string transaction_hash = 2;
 * @return {string}
 */
proto.quikdb.node.ListNodeResponse.prototype.getTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.ListNodeResponse} returns this
 */
proto.quikdb.node.ListNodeResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.quikdb.node.ListNodeResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quikdb.node.ListNodeResponse} returns this
 */
proto.quikdb.node.ListNodeResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodeStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodeStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodeStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodeStatsRequest}
 */
proto.quikdb.node.GetNodeStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodeStatsRequest;
  return proto.quikdb.node.GetNodeStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodeStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodeStatsRequest}
 */
proto.quikdb.node.GetNodeStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodeStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodeStatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodeStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeStatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodeStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodeStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodeStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stats: (f = msg.getStats()) && proto.quikdb.node.NodeStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodeStatsResponse}
 */
proto.quikdb.node.GetNodeStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodeStatsResponse;
  return proto.quikdb.node.GetNodeStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodeStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodeStatsResponse}
 */
proto.quikdb.node.GetNodeStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quikdb.node.NodeStats;
      reader.readMessage(value,proto.quikdb.node.NodeStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodeStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodeStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodeStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodeStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quikdb.node.NodeStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeStats stats = 1;
 * @return {?proto.quikdb.node.NodeStats}
 */
proto.quikdb.node.GetNodeStatsResponse.prototype.getStats = function() {
  return /** @type{?proto.quikdb.node.NodeStats} */ (
    jspb.Message.getWrapperField(this, proto.quikdb.node.NodeStats, 1));
};


/**
 * @param {?proto.quikdb.node.NodeStats|undefined} value
 * @return {!proto.quikdb.node.GetNodeStatsResponse} returns this
*/
proto.quikdb.node.GetNodeStatsResponse.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.GetNodeStatsResponse} returns this
 */
proto.quikdb.node.GetNodeStatsResponse.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.GetNodeStatsResponse.prototype.hasStats = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && common_pb.PaginationRequest.toObject(includeInstance, f),
    statusFilter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    providerFilter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tierFilter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    verifiedOnly: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    listedOnly: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodesRequest}
 */
proto.quikdb.node.GetNodesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodesRequest;
  return proto.quikdb.node.GetNodesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodesRequest}
 */
proto.quikdb.node.GetNodesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PaginationRequest;
      reader.readMessage(value,common_pb.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = /** @type {!proto.quikdb.node.NodeStatus} */ (reader.readEnum());
      msg.setStatusFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.quikdb.node.ProviderType} */ (reader.readEnum());
      msg.setProviderFilter(value);
      break;
    case 4:
      var value = /** @type {!proto.quikdb.node.NodeTier} */ (reader.readEnum());
      msg.setTierFilter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerifiedOnly(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setListedOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.PaginationRequest.serializeBinaryToWriter
    );
  }
  f = message.getStatusFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProviderFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTierFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getVerifiedOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getListedOnly();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional quikdb.common.PaginationRequest pagination = 1;
 * @return {?proto.quikdb.common.PaginationRequest}
 */
proto.quikdb.node.GetNodesRequest.prototype.getPagination = function() {
  return /** @type{?proto.quikdb.common.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationRequest, 1));
};


/**
 * @param {?proto.quikdb.common.PaginationRequest|undefined} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
*/
proto.quikdb.node.GetNodesRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.GetNodesRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeStatus status_filter = 2;
 * @return {!proto.quikdb.node.NodeStatus}
 */
proto.quikdb.node.GetNodesRequest.prototype.getStatusFilter = function() {
  return /** @type {!proto.quikdb.node.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.quikdb.node.NodeStatus} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.setStatusFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ProviderType provider_filter = 3;
 * @return {!proto.quikdb.node.ProviderType}
 */
proto.quikdb.node.GetNodesRequest.prototype.getProviderFilter = function() {
  return /** @type {!proto.quikdb.node.ProviderType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.quikdb.node.ProviderType} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.setProviderFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional NodeTier tier_filter = 4;
 * @return {!proto.quikdb.node.NodeTier}
 */
proto.quikdb.node.GetNodesRequest.prototype.getTierFilter = function() {
  return /** @type {!proto.quikdb.node.NodeTier} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.quikdb.node.NodeTier} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.setTierFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool verified_only = 5;
 * @return {boolean}
 */
proto.quikdb.node.GetNodesRequest.prototype.getVerifiedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.setVerifiedOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool listed_only = 6;
 * @return {boolean}
 */
proto.quikdb.node.GetNodesRequest.prototype.getListedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.GetNodesRequest} returns this
 */
proto.quikdb.node.GetNodesRequest.prototype.setListedOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quikdb.node.GetNodesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.GetNodesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.GetNodesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.GetNodesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.quikdb.node.NodeInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && common_pb.PaginationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.GetNodesResponse}
 */
proto.quikdb.node.GetNodesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.GetNodesResponse;
  return proto.quikdb.node.GetNodesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.GetNodesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.GetNodesResponse}
 */
proto.quikdb.node.GetNodesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quikdb.node.NodeInfo;
      reader.readMessage(value,proto.quikdb.node.NodeInfo.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new common_pb.PaginationResponse;
      reader.readMessage(value,common_pb.PaginationResponse.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.GetNodesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.GetNodesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.GetNodesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.GetNodesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quikdb.node.NodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PaginationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeInfo nodes = 1;
 * @return {!Array<!proto.quikdb.node.NodeInfo>}
 */
proto.quikdb.node.GetNodesResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.quikdb.node.NodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quikdb.node.NodeInfo, 1));
};


/**
 * @param {!Array<!proto.quikdb.node.NodeInfo>} value
 * @return {!proto.quikdb.node.GetNodesResponse} returns this
*/
proto.quikdb.node.GetNodesResponse.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quikdb.node.NodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeInfo}
 */
proto.quikdb.node.GetNodesResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quikdb.node.NodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.GetNodesResponse} returns this
 */
proto.quikdb.node.GetNodesResponse.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional quikdb.common.PaginationResponse pagination = 2;
 * @return {?proto.quikdb.common.PaginationResponse}
 */
proto.quikdb.node.GetNodesResponse.prototype.getPagination = function() {
  return /** @type{?proto.quikdb.common.PaginationResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationResponse, 2));
};


/**
 * @param {?proto.quikdb.common.PaginationResponse|undefined} value
 * @return {!proto.quikdb.node.GetNodesResponse} returns this
*/
proto.quikdb.node.GetNodesResponse.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quikdb.node.GetNodesResponse} returns this
 */
proto.quikdb.node.GetNodesResponse.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quikdb.node.GetNodesResponse.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.StreamNodesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.StreamNodesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.StreamNodesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.StreamNodesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusFilter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    providerFilter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tierFilter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    verifiedOnly: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    listedOnly: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    batchSize: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.StreamNodesRequest}
 */
proto.quikdb.node.StreamNodesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.StreamNodesRequest;
  return proto.quikdb.node.StreamNodesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.StreamNodesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.StreamNodesRequest}
 */
proto.quikdb.node.StreamNodesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.quikdb.node.NodeStatus} */ (reader.readEnum());
      msg.setStatusFilter(value);
      break;
    case 2:
      var value = /** @type {!proto.quikdb.node.ProviderType} */ (reader.readEnum());
      msg.setProviderFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.quikdb.node.NodeTier} */ (reader.readEnum());
      msg.setTierFilter(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerifiedOnly(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setListedOnly(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.StreamNodesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.StreamNodesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.StreamNodesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.StreamNodesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProviderFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTierFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVerifiedOnly();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getListedOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional NodeStatus status_filter = 1;
 * @return {!proto.quikdb.node.NodeStatus}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getStatusFilter = function() {
  return /** @type {!proto.quikdb.node.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.quikdb.node.NodeStatus} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setStatusFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ProviderType provider_filter = 2;
 * @return {!proto.quikdb.node.ProviderType}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getProviderFilter = function() {
  return /** @type {!proto.quikdb.node.ProviderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.quikdb.node.ProviderType} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setProviderFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NodeTier tier_filter = 3;
 * @return {!proto.quikdb.node.NodeTier}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getTierFilter = function() {
  return /** @type {!proto.quikdb.node.NodeTier} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.quikdb.node.NodeTier} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setTierFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool verified_only = 4;
 * @return {boolean}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getVerifiedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setVerifiedOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool listed_only = 5;
 * @return {boolean}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getListedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setListedOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 batch_size = 6;
 * @return {number}
 */
proto.quikdb.node.StreamNodesRequest.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.StreamNodesRequest} returns this
 */
proto.quikdb.node.StreamNodesRequest.prototype.setBatchSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quikdb.node.StreamNodesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quikdb.node.StreamNodesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quikdb.node.StreamNodesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quikdb.node.StreamNodesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.StreamNodesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.quikdb.node.NodeInfo.toObject, includeInstance),
    isFinalBatch: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    totalSent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quikdb.node.StreamNodesResponse}
 */
proto.quikdb.node.StreamNodesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quikdb.node.StreamNodesResponse;
  return proto.quikdb.node.StreamNodesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quikdb.node.StreamNodesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quikdb.node.StreamNodesResponse}
 */
proto.quikdb.node.StreamNodesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quikdb.node.NodeInfo;
      reader.readMessage(value,proto.quikdb.node.NodeInfo.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinalBatch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalSent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quikdb.node.StreamNodesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quikdb.node.StreamNodesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quikdb.node.StreamNodesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quikdb.node.StreamNodesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quikdb.node.NodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsFinalBatch();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTotalSent();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * repeated NodeInfo nodes = 1;
 * @return {!Array<!proto.quikdb.node.NodeInfo>}
 */
proto.quikdb.node.StreamNodesResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.quikdb.node.NodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quikdb.node.NodeInfo, 1));
};


/**
 * @param {!Array<!proto.quikdb.node.NodeInfo>} value
 * @return {!proto.quikdb.node.StreamNodesResponse} returns this
*/
proto.quikdb.node.StreamNodesResponse.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quikdb.node.NodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quikdb.node.NodeInfo}
 */
proto.quikdb.node.StreamNodesResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quikdb.node.NodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quikdb.node.StreamNodesResponse} returns this
 */
proto.quikdb.node.StreamNodesResponse.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional bool is_final_batch = 2;
 * @return {boolean}
 */
proto.quikdb.node.StreamNodesResponse.prototype.getIsFinalBatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quikdb.node.StreamNodesResponse} returns this
 */
proto.quikdb.node.StreamNodesResponse.prototype.setIsFinalBatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint64 total_sent = 3;
 * @return {number}
 */
proto.quikdb.node.StreamNodesResponse.prototype.getTotalSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quikdb.node.StreamNodesResponse} returns this
 */
proto.quikdb.node.StreamNodesResponse.prototype.setTotalSent = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.quikdb.node.NodeStatus = {
  NODE_STATUS_PENDING: 0,
  NODE_STATUS_ACTIVE: 1,
  NODE_STATUS_MAINTENANCE: 2,
  NODE_STATUS_INACTIVE: 3,
  NODE_STATUS_SUSPENDED: 4,
  NODE_STATUS_TERMINATED: 5,
  NODE_STATUS_BANNED: 6
};

/**
 * @enum {number}
 */
proto.quikdb.node.ProviderType = {
  PROVIDER_TYPE_COMPUTE: 0,
  PROVIDER_TYPE_STORAGE: 1
};

/**
 * @enum {number}
 */
proto.quikdb.node.NodeTier = {
  NODE_TIER_BASIC: 0,
  NODE_TIER_STANDARD: 1,
  NODE_TIER_PREMIUM: 2,
  NODE_TIER_ENTERPRISE: 3,
  NODE_TIER_HYPERSCALE: 4,
  NODE_TIER_EDGE: 5,
  NODE_TIER_SPECIALTY: 6
};

goog.object.extend(exports, proto.quikdb.node);
