syntax = "proto3";

package quikdb.node;

import "common.proto";

option go_package = "github.com/quikdb/contracts-grpc/pkg/proto/node";

// Node related messages
message NodeCapacity {
  uint64 cpu_cores = 1;
  uint64 memory_gb = 2;
  uint64 storage_gb = 3;
  uint64 network_mbps = 4;
  uint64 gpu_count = 5;
  string gpu_type = 6;
}

message NodeMetrics {
  uint64 uptime_percentage = 1;
  uint64 total_jobs = 2;
  uint64 successful_jobs = 3;
  string total_earnings = 4; // BigNumber as string
  uint64 last_heartbeat = 5;
  uint64 avg_response_time = 6;
}

message NodeListing {
  bool is_listed = 1;
  string hourly_rate = 2; // BigNumber as string
  uint64 availability = 3;
  string region = 4;
  repeated string supported_services = 5;
  uint64 min_job_duration = 6;
  uint64 max_job_duration = 7;
}

message NodeExtendedInfo {
  string hardware_fingerprint = 1;
  uint64 carbon_footprint = 2;
  repeated string compliance = 3;
  uint64 security_score = 4;
  string operator_bio = 5;
  repeated string special_capabilities = 6;
  string bond_amount = 7; // BigNumber as string
  bool is_verified = 8;
  uint64 verification_expiry = 9;
  string contact_info = 10;
}

message NodeInfo {
  string node_id = 1;
  string node_address = 2;
  NodeStatus status = 3;
  ProviderType provider_type = 4;
  NodeTier tier = 5;
  NodeCapacity capacity = 6;
  NodeMetrics metrics = 7;
  NodeListing listing = 8;
  uint64 registered_at = 9;
  uint64 last_updated = 10;
  bool exists = 11;
  NodeExtendedInfo extended = 12;
  repeated string certifications = 13;
  repeated string connected_networks = 14;
}

enum NodeStatus {
  NODE_STATUS_PENDING = 0;
  NODE_STATUS_ACTIVE = 1;
  NODE_STATUS_MAINTENANCE = 2;
  NODE_STATUS_INACTIVE = 3;
  NODE_STATUS_SUSPENDED = 4;
  NODE_STATUS_TERMINATED = 5;
  NODE_STATUS_BANNED = 6;
}

enum ProviderType {
  PROVIDER_TYPE_COMPUTE = 0;
  PROVIDER_TYPE_STORAGE = 1;
}

enum NodeTier {
  NODE_TIER_BASIC = 0;
  NODE_TIER_STANDARD = 1;
  NODE_TIER_PREMIUM = 2;
  NODE_TIER_ENTERPRISE = 3;
  NODE_TIER_HYPERSCALE = 4;
  NODE_TIER_EDGE = 5;
  NODE_TIER_SPECIALTY = 6;
}

message NodeStats {
  uint64 total_nodes = 1;
  uint64 active_nodes = 2;
  uint64 listed_nodes = 3;
  uint64 verified_nodes = 4;
}

// Request/Response messages for Node operations
message RegisterNodeRequest {
  string node_id = 1;
  string node_address = 2;
  NodeTier tier = 3;
  ProviderType provider_type = 4;
}

message RegisterNodeResponse {
  bool success = 1;
  string transaction_hash = 2;
  string message = 3;
}

message GetNodeInfoRequest {
  string node_id = 1;
}

message GetNodeInfoResponse {
  NodeInfo node = 1;
}

message UpdateNodeStatusRequest {
  string node_id = 1;
  NodeStatus status = 2;
}

message UpdateNodeStatusResponse {
  bool success = 1;
  string transaction_hash = 2;
  string message = 3;
}

message UpdateNodeExtendedInfoRequest {
  string node_id = 1;
  NodeExtendedInfo extended = 2;
}

message UpdateNodeExtendedInfoResponse {
  bool success = 1;
  string transaction_hash = 2;
  string message = 3;
}

message ListNodeRequest {
  string node_id = 1;
  string hourly_rate = 2; // BigNumber as string
  uint64 availability = 3;
}

message ListNodeResponse {
  bool success = 1;
  string transaction_hash = 2;
  string message = 3;
}

message GetNodeStatsRequest {}

message GetNodeStatsResponse {
  NodeStats stats = 1;
}

message GetNodesRequest {
  quikdb.common.PaginationRequest pagination = 1;
  NodeStatus status_filter = 2;
  ProviderType provider_filter = 3;
  NodeTier tier_filter = 4;
  bool verified_only = 5;
  bool listed_only = 6;
}

message GetNodesResponse {
  repeated NodeInfo nodes = 1;
  quikdb.common.PaginationResponse pagination = 2;
}

message StreamNodesRequest {
  NodeStatus status_filter = 1;
  ProviderType provider_filter = 2;
  NodeTier tier_filter = 3;
  bool verified_only = 4;
  bool listed_only = 5;
  uint32 batch_size = 6; // Number of nodes to send per batch
}

message StreamNodesResponse {
  repeated NodeInfo nodes = 1;
  bool is_final_batch = 2;
  uint64 total_sent = 3;
}

// Node service
service NodeService {
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse);
  rpc UpdateNodeStatus(UpdateNodeStatusRequest) returns (UpdateNodeStatusResponse);
  rpc UpdateNodeExtendedInfo(UpdateNodeExtendedInfoRequest) returns (UpdateNodeExtendedInfoResponse);
  rpc ListNode(ListNodeRequest) returns (ListNodeResponse);
  rpc GetNodeStats(GetNodeStatsRequest) returns (GetNodeStatsResponse);
  
  // Node listing and streaming
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
  rpc StreamNodes(StreamNodesRequest) returns (stream StreamNodesResponse);
}
